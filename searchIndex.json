[
{
		"title": "Owncast's 4th Anniversary",
		"date":"Tue Oct 08 2024 00:13:51 GMT+0000 (Coordinated Universal Time)",
		"url":"/",
		"content": "May 23rd, 2024 marks the 4th anniversary of the first commit of Owncast, aptly titled: “WIP”.\nWIP\nIt was a bit before that when I actually started working on it in earnest, but not that far before. I remember duct taping a proof of concept together, opening my laptop's web port to the public internet, messaging somebody and asking “Could you open this URL in VLC or QuickTime or something?”. Since there was no web interface or player, I just wanted to see if video would play for somebody over the internet. When I was told it worked, I went from asking “I wonder if this is possible” to knowing it was possible.\nWhat specifically was happening four years ago?\nFor fun, I took a look at what the first month of Owncast commits looked like, and I don't remember things moving so fast. At that time, it already:\n\nHad native support for serving video via S3 compatible providers.\nThere were two additional contributors apart from me.\nChat had a fair bit of functionality.\nVideo transcoding was completely customizable.\nIt had persistent viewer statistics.\nDocumentation existed, including a quickstart guide.\nA build script and Dockerfile allowed for relatively easy building.\nYou could customize your page content with Markdown.\n\nHere are some other things that were going on at that time that never made it to where we are now:\n\nIt had native support for serving video via IPFS.\nThe web interface was built with Vue + Tailwind.\nYour chat username color was determined by a color hash of your username itself.\nChat had user avatars.\nChat showed embeds when links were shared, including images.\n\nWhere I started is not where it's been\nIt's remarkable how fast things move at first on any kind of project, and then as it starts to take shape it slows down and becomes a bit more methodical. Once the core functionality is built and it “works”, then you have to think about what's next. I suppose Owncast could have stopped right there. But I wanted it to be even easier to use, and more customizable. The more people who started using it, the more feedback I'd get, I started to get a picture of the long-term direction of the project and its features. And that direction is still what we're going from today. I wouldn't blame you if you thought I didn't listen to your suggestions, but I promise that's not true. The specific thing you request might not happen, but the spirit of what you're asking for heavily influences the trajectory of the project, and can turn into something that's useful for a wider user base.\nFour years ago, Owncast to me, was a free and open source, self-hosted live video server. And since people who live stream also often enjoy having chat, it would be useful to bundle in a little optional minimal chat side feature as well. But the focus was always the video. It's funny how much time and attention has gone into web interfaces (three entirely different implementations!) and chat over these years, when that has nothing to do with opening VLC and playing back a video stream. It's still a balancing act to this day, since some people care very, very much about chat, social features, the public directory, and interactivity. Others aren't concerned with those at all.\nWhat's up?\nIt's never a good time, but I'm looking at the backend codebase that began four years ago. As with anything that was started very small, and you build on top of it long enough, there's a point where at least some changes need to be made. Primarily because some of the things that are on our roadmap simply aren't possible with how the backend is architected. So while it's a messy undertaking, I think it's a valuable one, and it's happening now, so the really cool stuff can continue to get built after that.\nThank You\nThank you for the four-year journey. Your patience, your kindness, your contributions, your feedback, your encouragement, your donations, and for sharing your Owncast-powered live streams with me. Every so often I look at a screen full of those streams and I can't believe I had some small part in helping you build them. It continues to mean the world to me that you let me be involved.\nI'm still excited about Owncast every day. I can't say there hasn't been periods of burnout, and doubt. And if I didn't have an opportunity to see you out there using Owncast, maybe some of those periods would have been the end of it. But all of you keep it alive. At the end of the day, Owncast only exists because you use it. Everything else is an implementation detail.\nHere's to another four, five, ten years when Owncast will still be a “WIP”.",
		"tags": [ "note","owncast","gardenEntry"]
},

{
		"title": "Owncast-plans",
		"date":"Tue Oct 08 2024 00:13:51 GMT+0000 (Coordinated Universal Time)",
		"url":"/personal/blog-posts/owncast-plans/",
		"content": "While I try to keep a public roadmap, and keep a reasonable plan for Owncast I rarely have an opportunity to gush about features I’m looking forward to building. So I thought I’d write a quick blog post to share some of my personal thoughts about the my vision of Owncast from a high level.\nOwncast has been going through a large frontend refactor over the past year. And this wasn’t done lightly. It was done because I strongly felt if I wanted to build the features I had envisioned I wasn’t going to get there with the current frontend architecture, capabilities and tooling. So once this ships, I can get back to building features again! I’m really looking forward to that.\nAdmittedly I have some backend infrastructure refactoring planned once the frontend ships, but I do expect that to be more straightforward.\nSo what are these features?\nThe first big one I’m looking forward to are scheduled streams. The ability to say “I stream at 7:30 every Tuesday” or “This Friday I have an event at 6pm”. It will be a really nice thing to have on the Owncast stream page itself, so when you visit a stream that’s offline it tells you when you might want to come back. But that’s not the most interesting thing. People will be able to subscribe to a calendar so they have this schedule available to them wherever they are, so the real fans are always up to date. Additionally I can propagate this scheduled data to the Fediverse, updating the server’s profile info to include the next stream info, and inform followers that a stream is coming up soon. It’s all about informing people via different ways that something they might care about is coming up. I’m super excited about adding this functionality and I think it’ll benefit streamers and viewers alike.\nAnother feature I’m looking forward to is something I call “mini directories”. Something that people have asked for is to be able to run their own Owncast directories. The thought is that some communities and groups would like to be able to run multiple Owncast instances and have a way to link them all together. And while I’ve always thought that would be interesting, I’ve never been able to justify starting yet another rather large standalone software project that needs to be built, documented, supported, updated, etc for just a very small number of people. It’s not as simple as open sourcing the current Owncast directory site for many reasons.\nSo the solution I’m looking at is essentially every Owncast server to be a mini directory. Via ActivityPub (the standardized protocol that powers the Fediverse), each Owncast server will “Follow” other servers, and then the servers would federate between each other things like stream status (live/offline), schedule, and more. They could even list non-Owncast instances in their directory, as long as they are on the Fediverse. But of course they wouldn’t have all the additional federated info unless the remote server sent the required ActivityPub data. This means you could add PeerTube channels in your Owncast mini directory if you wanted to.\nAnd because things like stream state will be federated between Owncast instances, you could essentially mimic a Twitch-style “raid” because once your stream ends it’ll know what other streams are currently live, and can recommend your viewers to check them out.\nCool, right? This will build upon the power of ActivityPub and shared, standardized specs. I hope this will expand some of the things we do with decentralized, federated data. In theory any Fediverse service could send the correct activities to Owncast and share state to show up in this directory (as long as the Owncast instance has explicitly followed the remote account, of course).\nAnd while I could go on and on about ideas, I’ll briefly mention one more big one. A category of features I put under “replays”. I explicitly call them “replays” because that’s the point, for a viewer to be able to re-play part or whole of a stream.\nThe plan is to start with clips. And while that’s technically more challenging, with more UI and requirements from my side, I believe it has the most value. I think being able to share highlights of a stream will help grow people’s viewership more than entire streams, at first.\nThe entire replay project will be large, with a lot of design and UI requirements that admittedly I’m worried about. As I’ve blogged about in the past I’ve had a near impossible time getting design help, and it’s by far the skill set I have the hardest time with. So it’s going to be a long journey to get to where I’m trying to get to. But I’ll cross that bridge when I get to it.\nCan’t wait to build this stuff. I hope some of you join me!",
		"tags": [ "note","owncast"]
}
]